DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(1024) UNIQUE,
    default_view VARCHAR(8),
    account_status VARCHAR(16),
    role VARCHAR(16),
    lang VARCHAR(16),
    confirm_code VARCHAR(16),
    color_code VARCHAR(16),
    password VARCHAR(1024),
    username VARCHAR(1024),
    realname VARCHAR(1024),
    account_type VARCHAR(32),
    facebook_user_id VARCHAR(64),
    facebook_info VARCHAR(2048),
    organization_code INTEGER,
    created_date BIGINT
);

DROP TABLE IF EXISTS user_clients CASCADE;
CREATE TABLE user_clients (
    user_id INT4 NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    client_id VARCHAR(16),
    success VARCHAR(16),
    created_date BIGINT,
    active_date BIGINT,
    token VARCHAR(128),
    message VARCHAR(128),
    PRIMARY KEY (user_id, client_id)
);

DROP TABLE IF EXISTS mail_queue CASCADE;
CREATE TABLE mail_queue (
    id SERIAL PRIMARY KEY,
    email VARCHAR(1024),
    mail_content jsonb,
    status VARCHAR(64)
);

DROP TABLE IF EXISTS databases CASCADE;
CREATE TABLE databases (
    id serial PRIMARY KEY,
    database VARCHAR (64) NOT NULL,
    owner INT REFERENCES users (id) ON DELETE CASCADE,
    reader INT REFERENCES users (id) ON DELETE CASCADE,
    writer INT REFERENCES users (id) ON DELETE CASCADE,
    UNIQUE (database, owner)
);

DROP TABLE IF EXISTS tables CASCADE;
CREATE TABLE tables (
    id serial PRIMARY KEY,
    database INT REFERENCES databases (id) ON DELETE CASCADE NOT NULL,
    tablename VARCHAR (64) NOT NULL,
    type VARCHAR (32) NOT NULL,
    data text,
    owner INT REFERENCES users (id) ON DELETE CASCADE,
    last_fed DATE,
    last_processed DATE,
    UNIQUE (database, tablename, owner)
);

DROP TABLE IF EXISTS text_tables_index CASCADE;
CREATE TABLE text_tables_index (
    id serial PRIMARY KEY,
    database INT REFERENCES databases(id) ON DELETE CASCADE NOT NULL,
    _table INT REFERENCES tables (id) ON DELETE CASCADE NOT NULL,
    _column VARCHAR (64) NOT NULL,
    display_field VARCHAR(64) DEFAULT 'url',
    enable BOOLEAN,
    UNIQUE (database,_table,_column)
);

DROP TABLE IF EXISTS charts CASCADE;
CREATE TABLE charts (
    id serial PRIMARY KEY,
    name VARCHAR (64) NOT NULL,
    database INT REFERENCES databases(id) ON DELETE CASCADE NOT NULL,
    dataset INT REFERENCES tables (id) ON DELETE CASCADE NOT NULL,
    chart text NOT NULL,
    data text,
    owner INT REFERENCES users (id) ON DELETE CASCADE NOT NULL,
    UNIQUE (name, owner)
);

DROP TABLE IF EXISTS api_keys CASCADE;
CREATE TABLE api_keys (
    id serial PRIMARY KEY,
    key VARCHAR (64) NOT NULL,
    name VARCHAR (64) NOT NULL,
    owner INT REFERENCES users (id) ON DELETE CASCADE NOT NULL
);

DROP TABLE IF EXISTS api_scopes CASCADE;
CREATE TABLE api_scopes (
    id INT REFERENCES api_keys(id) ON DELETE CASCADE,
    api VARCHAR (64) NOT NULL,
    database INT REFERENCES databases (id) ON DELETE CASCADE NOT NULL,
    _table INT REFERENCES tables (id) ON DELETE CASCADE
);

