{
	"https://en.wikipedia.org/wiki/Queen_(band)" : {
		"display_url":"http://google.com",
		"shell": "src/my-app/my-app.html",
		"tags": [
			"gundam",
			"metal gear solid",
			"funky brother"
		],
		"metadata": {
			"singer":"freddie",
			"band":"queen",
			"genre":"rock"
		},
		"title":"Queen wiki",
		"encoding":"base64",
		"body":"UXVlZW4gYXJlIGEgQnJpdGlzaCByb2NrIGJhbmQgdGhhdCBmb3JtZWQgaW4gTG9uZG9uIGluIDE5NzAuIFRoZWlyIGNsYXNzaWMgbGluZS11cCB3YXMgRnJlZGRpZSBNZXJjdXJ5IChsZWFkIHZvY2FscywgcGlhbm8pLCBCcmlhbiBNYXkgKGxlYWQgZ3VpdGFyLCB2b2NhbHMpLCBSb2dlciBUYXlsb3IgKGRydW1zLCB2b2NhbHMpLCBhbmQgSm9obiBEZWFjb24gKGJhc3MgZ3VpdGFyKS4gUXVlZW4ncyBlYXJsaWVzdCB3b3JrcyB3ZXJlIGluZmx1ZW5jZWQgYnkgcHJvZ3Jlc3NpdmUgcm9jaywgaGFyZCByb2NrIGFuZCBoZWF2eSBtZXRhbCwgYnV0IHRoZSBiYW5kIGdyYWR1YWxseSB2ZW50dXJlZCBpbnRvIG1vcmUgY29udmVudGlvbmFsIGFuZCByYWRpby1mcmllbmRseSB3b3JrcyBieSBpbmNvcnBvcmF0aW5nIGZ1cnRoZXIgc3R5bGVzLCBzdWNoIGFzIGFyZW5hIHJvY2sgYW5kIHBvcCByb2NrLCBpbnRvIHRoZWlyIG11c2ljLgpCZWZvcmUgZm9ybWluZyBRdWVlbiwgQnJpYW4gTWF5IGFuZCBSb2dlciBUYXlsb3IgaGFkIHBsYXllZCB0b2dldGhlciBpbiBTbWlsZS4gTWVyY3VyeSwgdGhlbiBrbm93biBieSBoaXMgYmlydGggbmFtZSwgRmFycm9raCAiRnJlZGRpZSIgQnVsc2FyYSwgd2FzIGEgZmFuIG9mIFNtaWxlIGFuZCBlbmNvdXJhZ2VkIHRoZW0gdG8gZXhwZXJpbWVudCB3aXRoIG1vcmUgZWxhYm9yYXRlIHN0YWdlIGFuZCByZWNvcmRpbmcgdGVjaG5pcXVlcy4gTWVyY3VyeSBqb2luZWQgaW4gMTk3MCwgc3VnZ2VzdGVkIHRoZSBuYW1lICJRdWVlbiIsIGFuZCBhZG9wdGVkIGhpcyBmYW1pbGlhciBzdGFnZSBuYW1lLiBEZWFjb24gd2FzIHJlY3J1aXRlZCBiZWZvcmUgdGhlIGJhbmQgcmVjb3JkZWQgdGhlaXIgZXBvbnltb3VzIGRlYnV0IGFsYnVtIGluIDE5NzMuIFF1ZWVuIGZpcnN0IGNoYXJ0ZWQgaW4gdGhlIFVLIHdpdGggdGhlaXIgc2Vjb25kIGFsYnVtLCBRdWVlbiBJSSwgaW4gMTk3NCwgYnV0IGl0IHdhcyB0aGUgcmVsZWFzZSBvZiBTaGVlciBIZWFydCBBdHRhY2sgbGF0ZXIgdGhhdCB5ZWFyIGFuZCBBIE5pZ2h0IGF0IHRoZSBPcGVyYSBpbiAxOTc1IHdoaWNoIGJyb3VnaHQgdGhlbSBpbnRlcm5hdGlvbmFsIHN1Y2Nlc3MuIFRoZSBsYXR0ZXIgZmVhdHVyZWQgIkJvaGVtaWFuIFJoYXBzb2R5Iiwgd2hpY2ggc3RheWVkIGF0IG51bWJlciBvbmUgaW4gdGhlIFVLIGZvciBuaW5lIHdlZWtzIGFuZCBhbHNvIGhlbHBlZCB0byBwb3B1bGFyaXNlIHRoZSBtdXNpYyB2aWRlby4KVGhlIGJhbmQncyAxOTc3IGFsYnVtIE5ld3Mgb2YgdGhlIFdvcmxkIGNvbnRhaW5lZCAiV2UgV2lsbCBSb2NrIFlvdSIgYW5kICJXZSBBcmUgdGhlIENoYW1waW9ucyIsIHdoaWNoIGhhdmUgYmVjb21lIGFudGhlbXMgYXQgc3BvcnRpbmcgZXZlbnRzLiBCeSB0aGUgZWFybHkgMTk4MHMsIFF1ZWVuIHdlcmUgb25lIG9mIHRoZSBiaWdnZXN0IHN0YWRpdW0gcm9jayBiYW5kcyBpbiB0aGUgd29ybGQuICJBbm90aGVyIE9uZSBCaXRlcyB0aGUgRHVzdCIgKDE5ODApIGJlY2FtZSB0aGVpciBiZXN0LXNlbGxpbmcgc2luZ2xlLCB3aGlsZSB0aGVpciAxOTgxIGNvbXBpbGF0aW9uIGFsYnVtIEdyZWF0ZXN0IEhpdHMgaXMgdGhlIGJlc3Qtc2VsbGluZyBhbGJ1bSBpbiB0aGUgVUsgYW5kIGlzIGNlcnRpZmllZCBlaWdodCB0aW1lcyBwbGF0aW51bSBpbiB0aGUgVVMuIFRoZWlyIHBlcmZvcm1hbmNlIGF0IHRoZSAxOTg1IExpdmUgQWlkIGNvbmNlcnQgaGFzIGJlZW4gcmFua2VkIGFtb25nIHRoZSBncmVhdGVzdCBpbiByb2NrIGhpc3RvcnkgYnkgdmFyaW91cyBtdXNpYyBwdWJsaWNhdGlvbnMuIEluIDE5OTEsIE1lcmN1cnkgZGllZCBvZiBicm9uY2hvcG5ldW1vbmlhLCBhIGNvbXBsaWNhdGlvbiBvZiBBSURTLCBhbmQgRGVhY29uIHJldGlyZWQgaW4gMTk5Ny4gTWF5IGFuZCBUYXlsb3IgaGF2ZSBwZXJmb3JtZWQgdW5kZXIgdGhlIFF1ZWVuIG5hbWUgd2l0aCBQYXVsIFJvZGdlcnMgYW5kIEFkYW0gTGFtYmVydCBhcyB2b2NhbGlzdHMgb24gdG91cnMgc2luY2UuCkVzdGltYXRlcyBvZiB0aGVpciByZWNvcmQgc2FsZXMgcmFuZ2UgZnJvbSAxNTAgbWlsbGlvbiB0byAzMDAgbWlsbGlvbiByZWNvcmRzLCBtYWtpbmcgdGhlbSBvbmUgb2YgdGhlIHdvcmxkJ3MgYmVzdC1zZWxsaW5nIG11c2ljIGFydGlzdHMuIFF1ZWVuIHJlY2VpdmVkIHRoZSBPdXRzdGFuZGluZyBDb250cmlidXRpb24gdG8gQnJpdGlzaCBNdXNpYyBBd2FyZCBmcm9tIHRoZSBCcml0aXNoIFBob25vZ3JhcGhpYyBJbmR1c3RyeSBpbiAxOTkwLiBUaGV5IHdlcmUgaW5kdWN0ZWQgaW50byB0aGUgUm9jayBhbmQgUm9sbCBIYWxsIG9mIEZhbWUgaW4gMjAwMS4gRWFjaCBtZW1iZXIgb2YgUXVlZW4gaGFzIGNvbXBvc2VkIG11bHRpcGxlIGhpdCBzaW5nbGVzLCBhbmQgYWxsIGZvdXIgYmFuZCBtZW1iZXJzIHdlcmUgaW5kdWN0ZWQgaW50byB0aGUgU29uZ3dyaXRlcnMgSGFsbCBvZiBGYW1lIGluIDIwMDMuIEluIDIwMDUgdGhlIGJhbmQgcmVjZWl2ZWQgdGhlIEl2b3IgTm92ZWxsbyBBd2FyZCBmb3IgT3V0c3RhbmRpbmcgU29uZyBDb2xsZWN0aW9uIGZyb20gdGhlIEJyaXRpc2ggQWNhZGVteSBvZiBTb25nd3JpdGVycywgQ29tcG9zZXJzLCBhbmQgQXV0aG9ycywgYW5kIGluIDIwMTggdGhleSB3ZXJlIHByZXNlbnRlZCB0aGUgR3JhbW15IExpZmV0aW1lIEFjaGlldmVtZW50IEF3YXJkLgo="
	},
	"https://en.wikipedia.org/wiki/Guns_N%27_Roses": {
		"display_url":"http://google.com",
		"shell": "src/my-app/my-app.html",
		"tags": [
			"axl",
			"slash",
			"dizzy",
			"rock",
			"metal"
		],
		"title":"Guns wiki",
		"metadata": {
			"singer":"axl rose",
			"band":"guns 'n roses",
			"singer":"axl"
		},
		"encoding":"base64",
		"body":"R3VucyBOJyBSb3Nlcywgb2Z0ZW4gYWJicmV2aWF0ZWQgYXMgR05SLCBpcyBhbiBBbWVyaWNhbiBoYXJkIHJvY2sgYmFuZCBmcm9tIExvcyBBbmdlbGVzLCBDYWxpZm9ybmlhLCBmb3JtZWQgaW4gMTk4NS4gVGhlIGxpbmV1cCwgd2hlbiBmaXJzdCBzaWduZWQgdG8gR2VmZmVuIFJlY29yZHMgaW4gMTk4NiwgY29uc2lzdGVkIG9mIHZvY2FsaXN0IEF4bCBSb3NlLCBsZWFkIGd1aXRhcmlzdCBTbGFzaCwgcmh5dGhtIGd1aXRhcmlzdCBJenp5IFN0cmFkbGluLCBiYXNzaXN0IER1ZmYgTWNLYWdhbiwgYW5kIGRydW1tZXIgU3RldmVuIEFkbGVyLiBHdW5zIE4nIFJvc2VzIGhhcyByZWxlYXNlZCBzaXggc3R1ZGlvIGFsYnVtcywgYWNjdW11bGF0aW5nIHNhbGVzIG9mIG1vcmUgdGhhbiAxMDAgbWlsbGlvbiByZWNvcmRzIHdvcmxkd2lkZSwgaW5jbHVkaW5nIDQ1IG1pbGxpb24gaW4gdGhlIFVuaXRlZCBTdGF0ZXMsIG1ha2luZyB0aGVtIHRoZSA0MXN0IGJlc3Qtc2VsbGluZyBhcnRpc3Qgb2YgYWxsIHRpbWUuCkd1bnMgTicgUm9zZXMnIGRlYnV0IGFsYnVtLCBBcHBldGl0ZSBmb3IgRGVzdHJ1Y3Rpb24gKDE5ODcpLCByZWFjaGVkIG51bWJlciBvbmUgb24gdGhlIEJpbGxib2FyZCAyMDAgYSB5ZWFyIGFmdGVyIGl0cyByZWxlYXNlLCBvbiB0aGUgc3RyZW5ndGggb2YgIlN3ZWV0IENoaWxkIG8nIE1pbmUiLCB0aGUgYmFuZCdzIG9ubHkgc2luZ2xlIHRvIHJlYWNoIG51bWJlciBvbmUgb24gdGhlIEJpbGxib2FyZCBIb3QgMTAwLiBUaGUgYWxidW0gaGFzIHNvbGQgYXBwcm94aW1hdGVseSAzMCBtaWxsaW9uIGNvcGllcyB3b3JsZHdpZGUsIGluY2x1ZGluZyAxOCBtaWxsaW9uIHVuaXRzIGluIHRoZSBVbml0ZWQgU3RhdGVzLCBtYWtpbmcgaXQgdGhlIGJlc3Qtc2VsbGluZyBkZWJ1dCBhbGJ1bSBvZiBhbGwgdGltZSBpbiB0aGUgVVMsIGFzIHdlbGwgYXMgdGhlIGVsZXZlbnRoIGJlc3Qtc2VsbGluZyBhbGJ1bSBpbiB0aGUgVW5pdGVkIFN0YXRlcy4gVGhlIHN1Y2Nlc3Mgb2YgdGhlIGRlYnV0IHdhcyBmb2xsb3dlZCBieSB0aGUgZWlnaHQtc29uZyBhbGJ1bSBHIE4nIFIgTGllcyAoMTk4OCkgd2hpY2ggcmVhY2hlZCBudW1iZXIgdHdvIG9uIHRoZSBCaWxsYm9hcmQgMjAwLiBUaGUgdHdpbiBhbGJ1bXMgVXNlIFlvdXIgSWxsdXNpb24gSSBhbmQgVXNlIFlvdXIgSWxsdXNpb24gSUkgKDE5OTEpIGRlYnV0ZWQgYXQgbnVtYmVyIHR3byBhbmQgbnVtYmVyIG9uZSBvbiB0aGUgQmlsbGJvYXJkIDIwMCByZXNwZWN0aXZlbHkgYW5kIGhhdmUgc29sZCBhIGNvbWJpbmVkIDM1IG1pbGxpb24gY29waWVzIHdvcmxkd2lkZSwgaW5jbHVkaW5nIDE0IG1pbGxpb24gdW5pdHMgaW4gdGhlIFVuaXRlZCBTdGF0ZXMuIFRoZSBjb3ZlciBhbGJ1bSAiVGhlIFNwYWdoZXR0aSBJbmNpZGVudD8iICgxOTkzKSB3YXMgdGhlIGJhbmQncyBsYXN0IHN0dWRpbyBhbGJ1bSB0byBmZWF0dXJlIFNsYXNoIGFuZCBNY0thZ2FuLgpBZnRlciBtb3JlIHRoYW4gYSBkZWNhZGUgb2Ygd29yayBhbmQgc2V2ZXJhbCBsaW5ldXAgY2hhbmdlcywgR3VucyBOJyBSb3NlcyByZWxlYXNlZCB0aGUgbG9uZy1hd2FpdGVkIGFsYnVtIENoaW5lc2UgRGVtb2NyYWN5ICgyMDA4KSB3aGljaCwgYXQgYW4gZXN0aW1hdGVkICQxNCBtaWxsaW9uIGluIHByb2R1Y3Rpb24gY29zdHMsIGlzIHRoZSBtb3N0IGV4cGVuc2l2ZSByb2NrIGFsYnVtIHRvIGV2ZXIgYmUgcHJvZHVjZWQgaW4gbXVzaWMgaGlzdG9yeS4gSXQgZGVidXRlZCBhdCBudW1iZXIgdGhyZWUgb24gdGhlIEJpbGxib2FyZCAyMDAgYnV0IHVuZGVyc29sZCBpbmR1c3RyeSBleHBlY3RhdGlvbnMsIGRlc3BpdGUgbW9zdGx5IHBvc2l0aXZlIGNyaXRpY2FsIHJlY2VwdGlvbi4gRm9ybWVyIG1lbWJlcnMgU2xhc2ggYW5kIE1jS2FnYW4gYm90aCByZWpvaW5lZCB0aGUgYmFuZCBpbiAyMDE2LCBlbWJhcmtpbmcgb24gdGhlIE5vdCBpbiBUaGlzIExpZmV0aW1lLi4uIFRvdXIuIFRoZSB0b3VyIGlzIGN1cnJlbnRseSB0aGUgZm91cnRoIGhpZ2hlc3QtZ3Jvc3NpbmcgY29uY2VydCB0b3VyIG9mIGFsbC10aW1lLCBncm9zc2luZyBvdmVyICQ0ODAgbWlsbGlvbiBieSBEZWNlbWJlciAyMDE3LgpHdW5zIE4nIFJvc2VzJyBsYXRlIDE5ODBzIGFuZCBlYXJseSAxOTkwcyB5ZWFycyBoYXZlIGJlZW4gZGVzY3JpYmVkIGFzIHRoZSBwZXJpb2QgaW4gd2hpY2ggdGhlIGdyb3VwIGJyb3VnaHQgZm9ydGggYSAiaGVkb25pc3RpYyByZWJlbGxpb3VzbmVzcyIgcmVtaW5pc2NlbnQgb2YgdGhlIGVhcmx5IFJvbGxpbmcgU3RvbmVzLCBhIHJlcHV0YXRpb24gdGhhdCBoYWQgZWFybmVkIHRoZSBncm91cCB0aGUgbmlja25hbWUgInRoZSBtb3N0IGRhbmdlcm91cyBiYW5kIGluIHRoZSB3b3JsZCIuIFRoZSBiYW5kJ3MgY2xhc3NpYyBsaW5ldXAsIGFsb25nIHdpdGggbGF0ZXIgbWVtYmVycyBrZXlib2FyZGlzdCBEaXp6eSBSZWVkIGFuZCBkcnVtbWVyIE1hdHQgU29ydW0sIHdhcyBpbmR1Y3RlZCBpbnRvIHRoZSBSb2NrIGFuZCBSb2xsIEhhbGwgb2YgRmFtZSBpbiAyMDEyLCBpdHMgZmlyc3QgeWVhciBvZiBlbGlnaWJpbGl0eS4KVGhlIGJhbmQncyBtZW1iZXJzaGlwIGhhcyBjaGFuZ2VkIG1hbnkgdGltZXMgc2luY2UgdGhlIGVhcmx5IDE5OTBzLCB3aXRoIFJvc2UgYW5kIFJlZWQgYXMgdGhlIG9ubHkgdHdvIGNvbnN0YW50IG1lbWJlcnMgc2luY2UgMTk5MC4gVGhlIGN1cnJlbnQgbGluZXVwIGNvbnNpc3RzIG9mIFJvc2UsIFNsYXNoLCBNY0thZ2FuLCBSZWVkLCBndWl0YXJpc3QgUmljaGFyZCBGb3J0dXMsIGRydW1tZXIgRnJhbmsgRmVycmVyIGFuZCBrZXlib2FyZGlzdCBNZWxpc3NhIFJlZXNlLgo="
	},
	"https://en.wikipedia.org/wiki/New_York_City": {
		"display_url":"https://en.wikipedia.org/wiki/New_York_City",
		"shell": "src/my-app/my-app.html",
		"tags": [
			"axl",
			"slash",
			"dizzy",
			"rock",
			"metal"
		],
		"title":"Guns wiki",
		"metadata": {
			"singer":"axl rose",
			"band":"guns 'n roses",
			"singer":"axl"
		},
		"encoding":"base64",
		"body":""
	}
}
